# 第三方包
import logging
import pygame
import sys
from threading import Thread
from time import sleep
from traceback import format_exception_only

# 本地包
from init import appconfig, config
from mgr import Mgr
from ui import Ui, MessageBox

# 初始化
logger = logging.getLogger("main")
pygame.init()


class Main:
    def __init__(self):
        self.__clock = pygame.time.Clock()

        self.__config = config
        self.__appconfig = appconfig
        self.__ui = Ui(appconfig)
        self.__mgr = Mgr(appconfig, self.__config)

        self.running = True

    def mainloop(self):
        quit_events = []
        errored = False

        msg_box = None
        self.__config.error = ValueError("错误的输入")
        while self.running:
            self.__clock.tick(self.__appconfig.window["fps"])
            self.__ui.update()
            if len(quit_events) > 0:
                self.__ui.stop = True
                sys.exit(0)
            if not errored and self.__config.error is not None:
                try:
                    msg_box = MessageBox(
                        repr(self.__config.error),
                        self.__appconfig.fonts.get(70, pygame.font.Font(self.__appconfig.font_file, 70)),
                        self.__ui.screen,
                        message_type="error",
                        move_lens=30,
                        click_exit=True
                    )
                    self.__config.error = None
                    msg_box.show(10)
                    errored = True
                except Exception as e:
                    print(e)
            if errored and msg_box is not None and msg_box.done:
                errored = False
            if msg_box is not None:
                msg_box.update(pygame.event.get([pygame.MOUSEBUTTONUP, pygame.MOUSEBUTTONDOWN]))

            self.__mgr.read_file()
            self.__ui.font_text = self.__mgr.get_event()
            quit_events = pygame.event.get(pygame.QUIT)
            # if msg_box is not None:
            #     msg_box.updating = True
            pygame.display.update()


if __name__ == '__main__':
    t = Main()
    t.mainloop()
